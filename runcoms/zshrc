# BASIC path
export USER_PATH=$HOME/bin:/sbin
export LOCAL_PATH=/usr/local/bin:/usr/local/sbin:/usr/local/go/bin:/usr/local/go
export OPT_PATH=$HOME/man:/opt/local/bin:/opt/local/sbin

if [ "$(uname -s)" = 'Darwin' ]; then
  eval "$(hub alias -s)"
  export EDITOR='mvim -v -u ~/.vimrc.min'
  export VISTUAL='vim -f'
  export MAILCONF=$HOME/.mutt
  export NOTMUCH=$HOME/.mutt/mutt-notmuch-py
  export JAVA_HOME=$(/usr/libexec/java_home)
  export PROMPT_LOCAL=""
  export RVM=$HOME/.rvm/bin
  export AWS_IAM_HOME=$HOME/IAMCli-1.5.0
  export CPPFLAGS=-I/opt/X11/include
  export COREUTILS=/usr/local/opt/coreutils/libexec/gnubin
  export COREUTILSMAN=/usr/local/opt/coreutils/libexec/gnuman
  export TERM=rxvt

  # autoenv
  source /usr/local/opt/autoenv/activate.sh
else
  export EDITOR='vim -u ~/.vimrc.min'
  export VISTUAL='vim -f'
  export TERM=screen-256color
  export PROMPT_LOCAL="%n@%m"
  export LINUXBREW=$HOME/.linuxbrew/bin
  export MANPATH="$HOME/.linuxbrew/share/man:$MANPATH"
  export INFOPATH="$HOME/.linuxbrew/share/info:$INFOPATH"
  # Until LinuxBrew is fixed, the following is required.
  # See: https://github.com/Homebrew/linuxbrew/issues/47
  export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig:/usr/lib64/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib64/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH

  ## Setup linux brew
  export LINUXBREWHOME=$HOME/.linuxbrew
  export PATH=$LINUXBREWHOME/bin:$PATH
  export MANPATH=$LINUXBREWHOME/man:$MANPATH
  export PKG_CONFIG_PATH=$LINUXBREWHOME/lib64/pkgconfig:$LINUXBREWHOME/lib/pkgconfig:$PKG_CONFIG_PATH
  export LD_LIBRARY_PATH=$LINUXBREWHOME/lib64:$LINUXBREWHOME/lib:$LD_LIBRARY_PATH
  export GNUPGHOME=$HOME/.gnupg
fi

export PATH=$COREUTILS:$LOCAL_PATH:$PATH:$USER_PATH:$OPT_PATH:$SSHFS_PATH:$JAVA_HOME:$LINUXBREW:$AWS_IAM_HOME/bin:$NOTMUCH:$GOPATH/bin
export MANPATH=$COREUTILSMAN:$MANPATH

# source Prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# local env, only atttempting to load these if not installed as minimal 
if [[ ! -e "${ZDOTDIR:-$HOME}/.minimal_shell" ]]; then
  if [[ -e "${ZDOTDIR:-$HOME}/.zprezto/runcoms/local_env" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprezto/runcoms/local_env"
  fi
  # aliases
  if [[ -e "${ZDOTDIR:-$HOME}/.zprezto/runcoms/local_aliases" ]]; then
    source "${ZDOTDIR:-$HOME}/.zprezto/runcoms/local_aliases"
  fi
fi

function cmdinstallpkg(){
  # http://apple.stackexchange.com/questions/75684/installing-xcode-via-command-line
  if [ -a $1 ]; then
    local name=`echo $1 | tr -d '.pkg|.dmg'`
    hdiutil attach $1 && cd /Volumes/$name && sudo installer -pkg $name.mpkg -target / && cd - && hdiutil detach /Volumes/$name && rm $1
  else
    echo "Must be in the same dir as the package/dmg file"
  fi
}

function preztoup(){
  cd ~/.zprezto
  git commit . -m $@
  cd ~/dotfiles/prezto
  git checkout master
  git pull
  cd ~/dotfiles
  git commit . -m "bump prezto version"
  git push
  popd
  popd
  popd
}

function remote(){
  if [[ "$TMUX" == "" ]]; then
    tmux attach -t remote || tmux new -s remote
    exit 0
  fi
}

function work(){
  if [[ "$TMUX" == "" ]]; then
    tmux attach -t work || tmux new -s work
    exit 0
  fi
}

function monitor(){
  if [[ "$TMUX" == "" ]]; then
    tmux attach -t monitor || tmux new -s monitor
    exit 0
  fi
}

CASE_SENSITIVE="true"
DISABLE_UPDATE_PROMPT=true

# remote hosts completion [1]
#[ -f ~/.ssh/config ] && : ${(A)ssh_config_hosts:=${${${${(@M)${(f)"$(<~/.ssh/config)"}:#Host *}#Host }:#*\**}:#*\?*}}
[ -f ~/.ssh/known_hosts ] && : ${(A)ssh_known_hosts:=${${${(f)"$(<$HOME/.ssh/known_hosts)"}%%\ *}%%,*}}
[ -f ~/.ssh/work_hosts ] && : ${(A)work_hosts:=${${${(f)"$(<$HOME/.ssh/work_hosts)"}%%\ *}%%,*}}
[ -f ~/.ssh/work_net_hosts ] && : ${(A)work_net_hosts:=${${${(f)"$(<$HOME/.ssh/work_net_hosts)"}%%\ *}%%,*}}
zstyle ':completion:*:hosts' hosts $ssh_known_hosts $work_net_hosts $work_hosts
# [1] http://blog.jhr-online.de/290

setopt auto_pushd

# remote hosts, remote item completion
# ssh, scp, ping, host
zstyle ':completion:*:scp:*' tag-order \
      'hosts:-host hosts:-domain:domain hosts:-ipaddr:IP\ address *'
zstyle ':completion:*:scp:*' group-order \
      users files all-files hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order \
      users 'hosts:-host hosts:-domain:domain hosts:-ipaddr:IP\ address *'
zstyle ':completion:*:ssh:*' group-order \
      hosts-domain hosts-host users hosts-ipaddr
zstyle ':completion:*:(ssh|scp):*:hosts-host' ignored-patterns \
      '*.*' loopback localhost
zstyle ':completion:*:(ssh|scp):*:hosts-domain' ignored-patterns \
      '<->.<->.<->.<->' '^*.*' '*@*'
zstyle ':completion:*:(ssh|scp):*:hosts-ipaddr' ignored-patterns \
      '^<->.<->.<->.<->' '127.0.0.<->'
zstyle ':completion:*:(ssh|scp):*:users' ignored-patterns \
      adm bin daemon halt lp named shutdown sync

set -o vi
# 40ms for key sequences
export KEYTIMEOUT=6

# reference http://zshwiki.org/home/zle/bindkeys
bindkey -v
bindkey -M viins 'jk' vi-cmd-mode

bindkey '^P' up-history
bindkey '^N' down-history

bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

# backspace and ^h working even after
# returning from command mode
bindkey '^?' backward-delete-char
bindkey '^h' backward-delete-char

# ctrl-w removed word backwards
bindkey '^w' backward-kill-word

# ctrl-r starts searching history backward
#bindkey '^r' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-pattern-search-backward
bindkey -M vicmd '?' history-incremental-pattern-search-forward
bindkey -M viins '^R' history-incremental-pattern-search-backward
bindkey -M viins '^F' history-incremental-pattern-search-forward

FIGNORE=".o:~"
HISTFILE=~/.zsh_history
HISTSIZE=5000
LISTMAX=0
LOGCHECK=300
MAILCHECK=0
REPORTTIME=60
SAVEHIST=3000

function replace()
{
  ack $1
  read -q "REPLY?Are you sure? [y|N] "
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    ack -l $1 | xargs perl -pi -E 's/'$1'/'$2'/g'
  fi
}

function vi() {mvim -v -u ~/.vimrc.min $@}
function vim() {mvim $@}
alias bc="bc -l"
alias rdns="getent hosts"
alias mirror="wget --mirror --no-parent --convert-links"
alias pass="pwgen -s -1 -y"
alias grep='grep --color=tty -d skip'
alias egrep='egrep --color=tty -d skip'
alias cal=ccal
alias -g L=' | less'
alias -g WL=' | wc -l'
alias -g WC=' | wc -c'
alias tmux='TERM=screen-256color tmux'
function cwhois(){ /usr/bin/whois -h whois.cymru.com " -v $1"}
alias sha1sum='shasum'
function og(){ grep -rn "$1" *}

# https://news.ycombinator.com/item?id=986923e
alias c='clear'
alias r='reset'
alias q='exit'
alias cd..="cd .." # I often make this mistake
alias ..='cd ..'
alias ...='cd ../..'
alias -- -="cd -"

function ali() {
  echo "alias $1='${@:2}'" >> ~/.zshrc   #in ubuntu use   ~/.bash_aliases
  echo "made alias:";
  echo "alias $1='${@:2}'";
  source ~/.zshrc;  #reload zshrc
}

function up {
    if [[ "$#" < 1 ]] ; then
        cd ..
    else
        CDSTR=""
        for i in {1..$1} ; do
            CDSTR="../$CDSTR"
        done
        cd $CDSTR
    fi
}

alias m='more'
function l(){ tree -L 1 -CDFha --du $@ }
function ll(){ l -L 2 $@; }
function lll(){ l -L 3 $@; }

# serial/usb interfaces,  to kill type control-A (or W), then control-\
# http://www.tigoe.net/pcomp/resources/archives/avr/000749.shtml
#alias serial="screen /dev/tty.KeySerial1 9600"
alias serial="sudo screen /dev/tty.usbserial 9600"
alias picocom='picocom -b 115200 --send-cmd "sx -vv" /dev/tty.usbserial'

# gpg things
alias gsearch='gpg --search-key'
alias gpriv="export GNUPGHOME=$HOME/g"
alias gnormal="export GNUPGHOME=$HOME/.gnupg"
alias gkey='gpg --list-secret-keys -K'

# search for the last process that started and kill it
function rogue() {
  ssh $1 'PROCESS='st-catcher.pl'; ST=$(ps -eo pid,etime,cmd --sort=etime | grep $PROCESS | grep -v grep) ; if [ $(echo $ST | wc -l) -gt 0 ] ; then echo sudo "kill" $(echo $ST | head -n 1| awk '{print $1}'); fi'
}

function brewup()
{
  brew update
  brew upgrade brew-cask
  brew unlink $(brew outdated)
  brew install $(brew outdated)
  brew cleanup
  brew cask cleanup
}

function rproxy() {
  ssh -L 127.0.0.1:8181:$2 -N root@$1
}

function sfproxy() {
  #ssh -C2qTnN -D 8080 $1
  ssh util-sf5.hosts.fastly.net+$@
}

function http() {sudo python -m SimpleHTTPServer $1}
function kd() {kitchen destroy $1}
function kc() {kitchen converge $1}
function kl() {kitchen login $1}
function kt() {kitchen test $1}

function pssh() { xargs -P 5 -I {} ssh root@{} "$1" ; echo $1 }

function sshi()
{
   echo $1 | awk -F'@' '{print $1}' | xargs ssh-keygen -R > /dev/null 2>&1
   /usr/bin/ssh $@
}

alias logchef='log "chef"'


function whatismyip() { curl ipecho.net/plain }

function ami() { dig +short x86_64.ami.$@ TXT | xargs -I {} echo {} }

function ruby-init()
{
  if test -z "$1" ; then
    echo "Project name empty"
  else
    echo "gem install ore # unless already installed"
    mine $1 --bundler --git --rspec
  fi
}

function initgemset() { echo './.gems' > .rbenv-gemsets }

function dot2png() { dot -Tpng $1 > $1.png }

function dot2pdf() { dot -Tpdf $1 > $1.pdf }

function vmreset()
{
    actual_exit_code=$?
    set +e
    vagrant destroy --force
    vagrant up
}

function di()
{
  echo "aws ec2 describe-instances --instance-ids $1"
  aws ec2 describe-instances --instance-ids $1
}

function nack() { vim -c "Nack $*" }

function dsg()
{
  echo "make sure group-id is used"
  echo "aws ec2 describe-security-groups --filters Name==group-name, Values=$1"
  aws ec2 describe-security-groups --filters Name=group-name, Values="$1"
}

function asg()
{
  echo "aws ec2 authorize-security-group-ingress --group-id $1 --protocol tcp --port $2 --cidr $3"
  aws ec2 authorize-security-group-ingress --group-id $1 --protocol tcp --port $2 --cidr $3 --region $4
}

# Show the path from a symlink to its ultimate source.
folsym() {
    if [[ -e $1 || -h $1 ]]; then
   file=$1
    else
   file=`which $1`
    fi
    if [[ -e $file || -L $file ]]; then
   if [[ -L $file ]]; then
       echo `ls -ld $file | perl -ane 'print $F[7]'` '->'
       folsym `perl -le '$file = $ARGV[0];

ls
ls -ltra
               $dest = readlink $file;
               if ($dest !~ m{^/}) {
              $file =~ s{(/?)[^/]*$}{$1$dest};
               } else {
              $file = $dest;
               }
               $file =~ s{/{2,}}{/}g;
               while ($file =~ s{[^/]+/\.\./}{}) {
              ;
               }
               $file =~ s{^(/\.\.)+}{};
               print $file' $file`

   else
       ls -d $file
   fi
    else
   echo $file
    fi
}

# Remove useless files
clean () {
    if [ "$1" = "-r" ]; then
   find . \( -name '#*' -o -name '*~' -o -name '.*~' -o -name 'core*' \
             -o -name 'dead*' \) -ok rm '{}' ';'
    else
   rm -i \#* *~ .*~ core* dead*
    fi
}
#To print all IPv4 HTTP packets to and from port 80, i.e. print only packets that contain data, not, for example, SYN and FIN packets and    ACK-only packets.
# alias dumphttp="tcpdump -i "$1" "$2" 'tcp port 80 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'"

# http://blog.jasonantman.com/2010/04/dhcp-debugging-and-handy-tcpdump-filters/
alias dumpdhcp="tcpdump -i "$1" "$2" '((port 67 or port 68)'"
alias ss="ss -ieomn"
alias tc="tc -s -d qdisc ls dev $1"
alias ipcache="ip route flush table cache"

function tcp_probe { modprobe tcp_probe port=$1 && cat /proc/net/tcpprobe >/tmp/data.out & }
#[1]http://www.linuxfoundation.org/collaborate/workgroups/networking/tcpprobe
# tcpdump -nnvvXSs 1514 -c2 icmp #grab payload (X) and packet size
# tcpdump/tcptrace/xplot
# tcpdump -i eth2 -s 100 -w /tmp/tcpdump.out host hostname
# (or on solaris: snoop -s 100 -o /tmp/tcpdump.out dest host hostname )
# tcptrace -Sl /tmp/tcpdump.out
# xplot /tmp/a2b_tsg.xpl
function tcpread {tcpdump -lenxvvvttttnnr $1}
# top talker tcpdump
# tcpdump -tnn -c 200000 -i any -n dst port 80 | awk -F "." '{print $1"."$2"."$3"."$4}' | sort | uniq -c | sort -nr | awk ' $1 > 100 '
#
# GIT
# NOTE: some alias here are git aliases, see .gitconfig for reference.
function ga { git add ${@}}

# https://ariejan.net/2009/10/26/how-to-create-and-apply-a-patch-with-git/
function gpatch { git format-patch $1 --stdout > $2}

function gcm { git commit . -m "$@" }
alias gc='git commit -p'
alias gm='git checkout master && git pull'
alias d='git diff'
alias gu='git pull'
alias gp='git push origin HEAD'
function gnb { git checkout -b "$1" }
function gco { git checkout ${@} }
alias gb='git checkout -b "`whoami`/fix-`date +%Y%m%d`"'
alias gpp='git push origin HEAD && git pull-request'
alias gs='git sum'
alias g='git status -sb'
# http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
alias gbl='git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)"'

# Removing git submodule foo
# git submodule deinit foo
# rm -rf .git/modules/foo
# git commit -m "Removed submodule foo"

# GIT with crypt
function cryptinit() {
  git-crypt init
  touch .gitattributes
  git add .gitattributes
  git-crypt add-gpg-user D57E947A
}

function gitsyncmaster() {
  git checkout master &&
  git fetch origin &&
  git pull origin master &&
  git checkout $1 &&
  git rebase master
}

alias lock="git-crypt lock"
alias unlock="git-crypt unlock"

function toptalker(){
  ssh $1 'sudo tcpdump -n -i any -c 100000 -w tmp.pcap && curl -SOL https://gist.githubusercontent.com/sysbot/01cd0109b4126b9028bb/raw/eb013d75b7e7741daebe174d7546efe975973a7a/toptalker && bash toptalker && rm tmp.pcap'
}

function kra(){ knife exec -E 'nodes.find(:name => "'$1'").each { |n| n.run_list << "'$2'"; n.save }' }
function kte(){ knife exec -E 'nodes.transform(:name => "'$1'" {|n| n.chef_environment("'$2'")}' }
function kvc(){ knife vault create vault -J $1 }
function kvs(){ knife vault show vault $1 -p $2 -F json }
function kvr(){ knife vault refresh vault $1 }
function kvu(){ knife vault update vault ${@} }

function pan() {chef generate cookbook $1 -g ~/src/pan}
function checksum() { shasum -a 256 $1 }

alias gist='gist -c'
alias reload='source $HOME/.zshrc'
alias z='vi $HOME/.zshrc $HOME/.zprezto/runcoms/local_env'
alias a='vi $HOME/.zprezto/runcoms/local_aliases'
alias as='source $HOME/.zprezto/runcoms/local_aliases'
alias kitchen-init='~/src/kitchen-template/init.sh'

export EC2_URL="https://ec2.us-east-1.amazonaws.com"
alias ec2useast1="export EC2_URL=https://ec2.us-east-1.amazonaws.com"
alias ec2uswest2="export EC2_URL=https://ec2.us-west-2.amazonaws.com"
alias ec2uswest1="export EC2_URL=https://ec2.us-west-1.amazonaws.com"
alias ec2euwest1="export EC2_URL=https://ec2.eu-west-1.amazonaws.com"
alias ec2apsoutheast1="export EC2_URL=https://ec2.ap-southeast-1.amazonaws.com"
alias ec2apsoutheast2="export EC2_URL=https://ec2.ap-southeast-2.amazonaws.com"
alias ec2apnortheast1="export EC2_URL=https://ec2.ap-northeast-1.amazonaws.com"
alias ec2saeast1="export EC2_URL=https://ec2.sa-east-1.amazonaws.com"

export AWS_DEFAULT_REGION=us-east-1
alias ec2east='export AWS_DEFAULT_REGION=us-east-1'
alias ec2eu='export AWS_DEFAULT_REGION=eu-west-1'
alias ec2ap='export AWS_DEFAULT_REGION=ap-northeast-1'

# random
function vmstart() { vboxheadless --startvm $1 & }
function h() { heroku ${@} }

# aad zsh-syntax-highlighting.
# https://github.com/tarruda/zsh-autosuggestions
source ~/.zprezto/modules/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# Load zsh-autosuggestions.
source ~/.zprezto/modules/zsh-autosuggestions/autosuggestions.zsh
#
# Enable autosuggestions automatically.
zle-line-init() {
  zle autosuggest-start
}
zle -N zle-line-init

# accept suggestions without leaving insert mode
bindkey '^f' vi-forward-word
bindkey '^f' vi-forward-blank-word
bindkey "^I" expand-or-complete
